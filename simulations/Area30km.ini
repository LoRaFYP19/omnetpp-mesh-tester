
[General]
# network
	network = LoRaMesh
#	#LoRaMesh.mapPath = "map/uni"
	LoRaMesh.mapPath = "background/green"
	LoRaMesh.mapWidth = 60000 # width of the image of your map in meters
	LoRaMesh.mapHeight = 60000 # height of the image of your map in meters
	

#repeat
	repeat = 5

#eventlog Recording

	record-eventlog=true	

#image-path = 

# logging
#	cmdenv-status-frequency = 10000000s
	cmdenv-output-file = cmd_env_log.txt
	cmdenv-autoflush = true
	cmdenv-express-mode = true
    **.vector-recording = true
#	**.scalar-recording = true

# random numbers generator
	rng-class = "cMersenneTwister"
	seed-set = ${repetition} # ${processid}
# simulation timing
	simtime-resolution = -10
	sim-time-limit = 10000s
	**.loRaNodes[*].**.stopRoutingAfterDataDone = 7200s
	**.loRaEndNodes[*].**.stopRoutingAfterDataDone = 7200s
	
	warmup-period = 1h
# random deployment of nodes in a rectangular area
# number of nodes

#**.loRaNodes[0..20].LoRaNodeApp.routingMetric = 0
#**.loRaNodes[*].LoRaNodeApp.routingMetric = 2
#**.loRaEndNodes[*].LoRaNodeApp.routingMetric = 0
#


#

**.loRaEndNodes[*].rad = 10000
**.loRaEndNodes[*].centX = 10000
**.loRaEndNodes[*].centY = 10000


**.loRaEndNodes[*].deploymentType = "circle"
	
	# Placement of endNodes as a circle	

#**.loRaNodes[0..30].deploymentType = "circle"

	**.loRaNodes[*].deploymentType = "grid"
	**.loRaNodes[*].sepX = 2500m
	**.loRaNodes[*].sepY = 2500m

**.numberOfNodes = 576#76
**.numberOfEndNodes = 100#0


#
#**.loRaNodes[0..50].LoRaNodeApp.routingMetric = 2
#**.loRaNodes[50..].LoRaNodeApp.routingMetric = 0
#
##**.loRaNodes[0..50].displayString = "i=device/antenna_blue"
##**.loRaNodes[51..].displayString = "i=device/antenna_red"
##**.numberOfNodes = ${numberOfNodes = 4, 9, 16, 25, 36, 49}
#

# polwer consumption features
	**.loRaNodes[*].LoRaNic.radio.energyConsumerType = "LoRaEnergyConsumer"
	**.loRaNodes[*].**.energySourceModule = "IdealEpEnergyStorage"
	**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")

	**.loRaEndNodes[*].LoRaNic.radio.energyConsumerType = "LoRaEnergyConsumer"
	**.loRaEndNodes[*].**.energySourceModule = "IdealEpEnergyStorage"
	**.loRaEndNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")

#general network features
	**.constraintAreaMinX = 0m
	**.constraintAreaMinY = 0m
	**.constraintAreaMinZ = 0m
	**.constraintAreaMaxX = 60000m
	**.constraintAreaMaxY = 60000m
	**.constraintAreaMaxZ = 0m
	**.delayer.config = xmldoc("cloudDelays.xml")
	**.radio.radioMediumModule = "LoRaMedium"
	**.LoRaMedium.pathLossType = "LoRaLogNormalShadowing"
	**.d0=788m
	**.sigma = 0 
	**.K1 = 124.704
	**.K2 = 44.7
	**.minInterferenceTime = 0s

# network features
**.numberOfGateways = 0



# data packets generation
**.sendPacketsContinuously = false

**.loRaNodes[*].LoRaNodeApp.onlyNode0SendsPackets = true  #changed the parameter
**.loRaEndNodes[*].LoRaNodeApp.onlyNode0SendsPackets = true


**.numberOfDestinationsPerNode = 0 #it should be smaller than numberOfNodes, or 0 to send to all nodes
**.dataPacketDefaultSize = 20B
**.packetTTL = 0 #if 0, LoraNodeApp.cc calculates value
#**.timeToFirstDataPacket = 3600s

**.loRaNodes[*].LoRaNodeApp.timeToFirstDataPacket = 12600s
**.loRaEndNodes[*].LoRaNodeApp.timeToFirstDataPacket = 3600s

**.timeToNextDataPacketDist = "uniform"
**.timeToNextDataPacketMin = 0s

**.timeToNextDataPacketMax = ${timeToNextDataPacketMax=1h}

#**.timeToNextDataPacketMax = ${timeToNextDataPacketMax=0.0000s, \
#	0.1000s, 0.1500s, 0.2200s, 0.3300s, 0.4700s, 0.6800s, \
#	1.0000s, 1.5000s, 2.2000s, 3.3000s, 4.7000s, 6.8000s, \
#	10.0000s, 15.0000s, 22.0000s, 33.0000s, 47.0000s, 68.0000s, \
#	100.0000s, 150.0000s, 220.0000s, 330.0000s, 470.0000s, 680.0000s, \
# 	1000.000s, 1500.0000s, 2200.0000s}
**.timeToNextDataPacketAvg = 1h


# forwarded packets
**.numberOfPacketsToForward = 0 #0 for no limit
**.ownDataPriority = 0 #0: forward priority; 1: own data priority

**.loRaNodes[*].LoRaNodeApp.routingMetric = 2
**.loRaEndNodes[*].LoRaNodeApp.routingMetric = 0



# routing settings

**.routeDiscovery = true
**.routeTimeout = 300s
**.storeBestRouteOnly = false
**.getRoutesFromDataPackets = true
**.routingPacketPriority = 0.5
**.routingPacketMaxSize = 12B
**.timeToFirstRoutingPacket = 1800s+uniform(0s, 120s)
**.timeToNextRoutingPacketDist = "uniform"
**.timeToNextRoutingPacketMin = 0s
**.timeToNextRoutingPacketMax = 120s
**.timeToNextRoutingPacketAvg = 60s

# duty cycle
**.dutyCycle = 0.01
**.enforceDutyCycle = ${enforceDutyCycle = true, false}

# LoRa settings
**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**initialLoRaSF = 12
**.loRaNodes[*].**minLoRaSF = 7
**.loRaNodes[*].**maxLoRaSF = 12
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 1
**.loRaNodes[*].**initialLoRaTP = 19dBm
**.loRaNodes[*].**initialLoRaCAD = true
**.loRaNodes[*].**initialLoRaCADatt = 0dB

# nodes placement
**.loRaNodes[*].minX = 0m
**.loRaNodes[*].minY = 0m
**.loRaNodes[*].maxX = 2000m 
**.loRaNodes[*].maxY = 2000m 


**.loRaEndNodes[*].minX = 0m
**.loRaEndNodes[*].minY = 0m
**.loRaEndNodes[*].maxX = 4000m #4*247m
**.loRaEndNodes[*].maxY = 4000m #4*247m

**.LoRaMedium.mediumLimitCacheType = "LoRaMediumCache"
**.LoRaMedium.rangeFilter = "communicationRange"
**.LoRaMedium.neighborCacheType = "LoRaNeighborCache"
**.LoRaMedium.neighborCache.range = 3000m
**.LoRaMedium.neighborCache.refillPeriod = 3000s

**.loRaEndNodes[*].**.initFromDisplayString = false
**.loRaEndNodes[*].**initialLoRaSF = 12
**.loRaEndNodes[*].**minLoRaSF = 7
**.loRaEndNodes[*].**maxLoRaSF = 12
**.loRaEndNodes[*].**initialLoRaBW = 125 kHz
**.loRaEndNodes[*].**initialLoRaCR = 1
**.loRaEndNodes[*].**initialLoRaTP = 20dBm
**.loRaEndNodes[*].**initialLoRaCAD = true
**.loRaEndNodes[*].**initialLoRaCADatt = 0dB

